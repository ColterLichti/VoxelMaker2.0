import { Component } from '/ComponentSystem/ui/Component.js';

// The window, keeps the sizing nice
export class AppWindow extends Component {
    constructor() {
        super('app-window');
    }
}

// Pages represent different ui that can be switched between
export class AppPage extends Component {
    // this pages local context
    // use for storing page specific data
    _context;
    constructor() {
        super('app-page');
        this.enabled = false;
        this._context = {};
    }

    get context() {
        return this._context;
    }

    setContextObject(obj) {
        this._context = obj;
    }

    onPageShow() { };
}

export class VerticalRail extends Component {
    constructor() {
        super('vertical-rail');
    }
}

export class HorizontalRail extends Component {
    constructor() {
        super('horizontal-rail');
    }
}

export class CardGroup extends Component {
    constructor() {
        super('card-group');
    }
}

export class ListBox extends Component {
    constructor() {
        super('list-box');
    }
}

export class ListItem extends Component {
    constructor() {
        super('list-item');
    }
}

export class Button extends Component {
    _text;
    constructor(text) {
        super('button-component');
        this.text = text;
    }

    set text(text) {
        if (text !== undefined)
            this._text = text;
        else
            this._text = '';

        this.domElement.innerHTML = text;
    }

    get text() {
        return this._text;
    }
}

export class Heading extends Component {
    _text;
    constructor(text) {
        super('heading-component');
        this.text = text;
    }

    set text(text) {
        if (text !== undefined)
            this._text = text;
        else
            this._text = '';

        this.domElement.innerHTML = text;
    }

    get text() {
        return this._text;
    }
}

export class ProgressBar extends Component {
    _bar_element;

    constructor() {
        super('progress-bar');
        this._bar_element = this.element('indicator-bar');
        this._dom_element.appendChild(this._bar_element);
    }

    set progress(val) {
        let clamped = clamp(val, 0, 100);
        this._bar_element.width = clamped + '%';
    }

    get progress() {
        return this._bar_element.width.replace('%', '') * 1;
    }

    progressCallback_handler(val){
        this.progress = val;
    }
}

export class InputLabel extends Component {
    _for_name;
    constructor(text, compFor) {
        super('label');
        this.text = text;
        if (compFor instanceof Component) {
            let elem = compFor._dom_element;
            if (elem !== undefined && (elem.id === undefined || elem.id == '')) {
                this._for_name = 'AutoGeneratedName|' + (Math.random() * 9999999);
                elem.setAttribute('id', this._for_name);
            }
            this._dom_element.setAttribute('for', elem.id);
        }
    }

    set text(val) {
        this._dom_element.innerHTML = val;
    }

    get text() {
        return this._dom_element.innerHTML;
    }
}

export class TextField extends Component {

    constructor() {
        super('input');

        this._dom_element.type = 'text';
    }

    set text(val) {
        this._dom_element.value = val;
    }

    get text() {
        return this._dom_element.value;
    }

    set placeholder(val) {
        this._dom_element.placeholder = val;
    }

    get placeholder() {
        return this._dom_element.placeholder;
    }
}

export class RadioButton extends Component {
    constructor(group) {
        super('input');

        this._dom_element.type = 'radio';
        this.group = group;
    }

    set group(val) {
        this._dom_element.name = val;
    }

    get group() {
        return this._dom_element.name;
    }

    set value(val) {
        this._dom_element.setAttribute('value', val);
    }

    get value() {
        return this._dom_element.value;
    }

    set checked(val) {
        this._dom_element.setAttribute('checked', val);
    }

    get checked() {
        return this._dom_element.getAttribute('checked');
    }

    get groupValue() {
        let grp = document.querySelectorAll("input[type='radio']");

        for (let i = 0; i < grp.length; i++) {
            const inp = grp[i];
            if (inp.checked)
                return inp.value;
        }
    }
}

export class DropDown extends Component {
    _placeholder_option;
    constructor() {
        super('select');

        let opt = new Option();
        opt.disabled = true;
        opt.selected = true;
        opt.enabled = false;
        opt.value = 'placeholder';
        this._placeholder_option = opt;
        this.add(this._placeholder_option);

        this.subscribe('focus', (event) => {
            this._dom_element.blur();
        });
    }

    set placeholder(text) {
        if (text !== undefined && text !== '') {
            this._placeholder_option.text = text;
            this._placeholder_option.enabled = true;
            if (this._dom_element.children.length <= 1) {
                this._placeholder_option.selected = true;
            }
        }
        else {
            this._placeholder_option.enabled = false;
        }
    }

    get placeholder() {
        return this._placeholder_option.text;
    }

    get value() {
        return this._dom_element.value;
    }
}

export class Option extends Component {

    constructor(text) {
        super('option');

        if (text !== undefined)
            this.text = text;
    }

    set disabled(val) {
        this._dom_element.disabled = val ? 'disabled' : '';
    }

    get disabled() {
        return this._dom_element.disabled == 'disabled';
    }

    set selected(val) {
        this._dom_element.selected = val ? 'selected' : '';
    }

    get selected() {
        return this._dom_element.selected == 'selected';
    }

    set value(val) {
        this._dom_element.value = val;
    }

    get value() {
        return this._dom_element.value;
    }

    set text(val) {
        this._dom_element.innerHTML = val;
    }

    get text() {
        return this._dom_element.innerHTML;
    }
}

export class PureFaceButton extends Component {

    constructor(orientation, direction) {
        super('pure-face-button');

        Object.defineProperties(this, {
            wrapper: {
                value: this.element('wrapper'),
                writable: false,
                enumerable: false
            },
            face: {
                value: this.element('face'),
                writable: false,
                enumerable: false
            },
            button: {
                value: this.element('aux-button'),
                writable: false,
                enumerable: false
            },
            direction: {
                value: direction.toLowerCase(),
                writable: false,
                enumerable: false
            },
            orient: {
                value: orientation.toLowerCase(),
                writable: false,
                enumerable: false
            },
            _defaultImageURL: {
                value: '',
                writable: true,
                enumerable: false
            },
            _selectedImageURL: {
                value: '',
                writable: true,
                enumerable: false
            },
            _selected: {
                value: false,
                writable: true,
                enumerable: false
            },
            'layoutComponent': {
                value: () => {
                    // Build the face with wrapper
                    this.wrapper.appendChild(this.face);
                    this.button.innerHTML = 'ALL';

                    let first;
                    let second;
                    if (this.orient === 'top') {
                        this.button.classList.remove('orient-bottom');
                        first = this.button;
                        second = this.wrapper;
                    }
                    else if (this.orient === 'bottom') {
                        this.button.classList.add('orient-bottom');
                        first = this.wrapper;
                        second = this.button;
                    }

                    this.domElement.appendChild(first);
                    this.domElement.appendChild(second);
                },
                writable: false,
                enumerable: false
            },
            'handleClicks_handler': {
                value: (event) => {
                    if (event.target === this.button) {
                        let evt = new Event('aux-click');
                        evt.aux = true;
                        evt.face = false;
                        evt.component = this;
                        this.domElement.dispatchEvent(evt);
                    }
                    else if (event.target === this.face) {
                        let evt = new Event('face-click');
                        evt.aux = false;
                        evt.face = true;
                        evt.component = this;
                        this.domElement.dispatchEvent(evt);
                    }
                },
                writable: false,
                enumerable: false
            },
        });

        this.button.addEventListener('click', (event) => { this.handleClicks_handler(event) });
        this.face.addEventListener('click', (event) => { this.handleClicks_handler(event) });

        this.layoutComponent();
    }

    set defaultImageURL(url) {
        this._defaultImageURL = url;
        if (!this._selected)
            this.face.style.backgroundImage = "url('" + this._defaultImageURL + "')";
    }

    get defaultImageURL() {
        return this._defaultImageURL;
    }

    set selectedImageURL(url) {
        this._selectedImageURL = url;
        if (this._selected)
            this.face.style.backgroundImage = "url('" + this._selectedImageURL + "')";
    }

    get selectedImageURL() {
        return this._selectedImageURL;
    }

    set selected(val) {
        if (val) {
            this.face.style.backgroundImage = "url('" + this._selectedImageURL + "')";
        }
        else {
            this.face.style.backgroundImage = "url('" + this._defaultImageURL + "')";
        }

        this._selected = val;
    }

    get selected() {
        return this._selected;
    }
}

function clamp(val, min, max) {
    if (val < min)
        return min;
    else if (val > max)
        return max;
    return val
}