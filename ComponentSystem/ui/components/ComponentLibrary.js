import { Component } from '/ComponentSystem/ui/Component.js';

// The window, keeps the sizing nice
export class AppWindow extends Component {
    constructor() {
        super('app-window');
    }
}

// Pages represent different ui that can be switched between
export class AppPage extends Component {
    // this pages local context
    // use for storing page specific data
    _context;
    constructor() {
        super('app-page');
        this.enabled = false;
        this._context = {};
    }

    get context() {
        return this._context;
    }
}

export class VerticalRail extends Component {
    constructor() {
        super('vertical-rail');
    }
}

export class HorizontalRail extends Component {
    constructor() {
        super('horizontal-rail');
    }
}

export class CardGroup extends Component {
    constructor() {
        super('card-group');
    }
}

export class ListBox extends Component {
    constructor() {
        super('list-box');
    }
}

export class ListItem extends Component {
    constructor() {
        super('list-item');
    }
}

export class Button extends Component {
    _text;
    constructor(text) {
        super('button-component');
        this.text = text;
    }

    set text(text) {
        if (text !== undefined)
            this._text = text;
        else
            this._text = '';

        this.domElement.innerHTML = text;
    }

    get text() {
        return this._text;
    }
}

export class Heading extends Component {
    _text;
    constructor(text) {
        super('heading-component');
        this.text = text;
    }

    set text(text) {
        if (text !== undefined)
            this._text = text;
        else
            this._text = '';

        this.domElement.innerHTML = text;
    }

    get text() {
        return this._text;
    }
}

export class ProgressBar extends Component {
    _bar_element;

    constructor() {
        super('progress-bar');
        this._bar_element = this.element('indicator-bar');
        this._dom_element.appendChild(this._bar_element);
    }

    set progress(val) {
        let clamped = clamp(val, 0, 100);
        this._bar_element.width = clamped + '%';
    }

    get progress() {
        return this._bar_element.width.replace('%', '') * 1;
    }
}

export class InputLabel extends Component {
    _for_name;
    constructor(text, compFor) {
        super('label');
        this.text = text;
        if (compFor instanceof Component) {
            let elem = compFor._dom_element;
            if (elem !== undefined && (elem.name === undefined || elem.name == '')) {
                this._for_name = 'AutoGeneratedName|' + (Math.random() * 9999999);
                elem.name = this._for_name;
            }
            this._dom_element.setAttribute('for', elem.name);
        }
    }

    set text(val) {
        this._dom_element.innerHTML = val;
    }

    get text() {
        return this._dom_element.innerHTML;
    }
}

export class TextField extends Component {

    constructor() {
        super('input');

        this._dom_element.type = 'text';
    }

    set text(val) {
        this._dom_element.value = val;
    }

    get text() {
        this._dom_element.value;
    }

    set placeholder(val) {
        this._dom_element.placeholder = val;
    }

    get placeholder() {
        return this._dom_element.placeholder;
    }
}

export class RadioButton extends Component {
    constructor(group) {
        super('input');

        this._dom_element.type = 'radio';
        this.group = group;
    }

    set group(val) {
        this._dom_element.name = val;
    }

    get group() {
        return this._dom_element.name;
    }

    set value(val) {
        this._dom_element.setAttribute('value', val);
    }

    get value() {
        return this._dom_element.value;
    }

    set checked(val){
        this._dom_element.setAttribute('checked', val);
    }

    get checked(){
        return this._dom_element.getAttribute('checked');
    }

    get groupValue() {
        let grp = document.querySelectorAll("input[type='radio']");

        for (let i = 0; i < grp.length; i++) {
            const inp = grp[i];
            if(inp.checked)
                return inp.value;
        }
    }
}

function clamp(val, min, max) {
    if (val < min)
        return min;
    else if (val > max)
        return max;
    return val
}